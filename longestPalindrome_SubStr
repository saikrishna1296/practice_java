class Solution {
    public String longestPalindrome(String s) {
       if (s == null || s.length() == 0) {
            return "";
        }
        
        String longest = "";
        for (int i = 0; i < s.length(); i++) {
            // Odd length palindromes
            String oddPalindrome = expandAroundCenter(s, i, i);
            if (oddPalindrome.length() > longest.length()) {
                longest = oddPalindrome;
            }
            
            // Even length palindromes
            String evenPalindrome = expandAroundCenter(s, i, i + 1);
            if (evenPalindrome.length() > longest.length()) {
                longest = evenPalindrome;
            }
        }
        
        return longest;
    }
    
    private String expandAroundCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        // Return the substring from (left + 1) to (right - 1)
        return s.substring(left + 1, right);
    }
    
    public static void main(String[] args) {
        Solution solution = new Solution();
        String s = "babad";
        System.out.println("Longest palindromic substring of \"" + s + "\" is \"" + solution.longestPalindrome(s) + "\"");
    }
    }
